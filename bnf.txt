;--CODENAME: raxacoricofallapatorius--

;--Basic structures--

<program>::='PROGRAM' <identifier> <function>* 
<block>::='{'<working_block>*'}'
<working_block>::=<block>|<iwf_structures>|<statment>|<function call>
<iwf_structures>::=<if_stmts>|<while_stmt>|<for_stmt>
<function>::=<function_declaration>|<function_call>
<function_declaration>::='function' '('<set_of_parametrs>'):'<type> <block>
<function_call>::=<identifier>(<identifier>*)
<if_stmts>::=<if_stmt>|<if_else_stmt>
<if_stmt>::=if,'('<logical_statment>+') <block>
<if_else_stmt>::=<if_stmt> 'else' <block>
<while_stmt>::='while' '('<logical_statment>+')' <block>
<for_stmt>::='for' '('<initialization>';'<logical_statment>+';'<statment>')' <block>
<statment>::=<declaration>|<initialization>|<return>|<manipulation_statment>

;--Basic manipulations--

<derclaration>::='def' <identifier>':',<type>
<initialization> ::= declaration>|<identifier>':='<identifier>|<string>|<numeric>
<manipulation_statment>::=<statment_math>|<statment_logic>
<statment_math>::=<identifier>':='<identifier>|<numeric> <math_literal> <identifier>|<numeric>
<statment_logic>::=<identifier>':='<identifier>|<numeric> <logic_literal> <identifier>|<numeric>
<logical_expression>::=<identifier>|<numeric> <logic_literal> <identifier>|<numeric>
<logical_statment>::=<logical_expression>|<boolean_literal>
<return>::='return' <identifier>|<return_literal>
<parametr>::=<identifier>':'<type>
<set_of_parametr>::=<parametr>(','<parametr>)*

;--Basic types--

<type> ::= int|bool|float|str|void|<type_array>
<type_array> ::= int '[]' | float '[]'
<type_sign_decimal>::=?<sign><decimal_literal>
<type_sign_float>::=?<sign><floating_point_literal>
<array_get>::=<identifier> '['<decimal_literal>']'

;--Basic literals--

<return_literal>::=<boolean_literal>|<sign_numeric_literal>|<string>
<boolean_literal>::=true|false
<math_literal>::=+|-|*|/|%|'div'
<logical_literal>::='!'|'!='|'||'|'&&'|'<'|'>'|'>='|'<='
<floating_point_literal>::=<digit>.<digit>
<decimal_literal>::=<digit>+
<sign_numeric_literal>::=<type_sign_decimal>|<type_sign_float>
<digit> ::= [\d]
<char> ::= [\w]
<identifier>::=[a-zA-Z][a-zA-Z0-9]*
<string>::='"',([\w]^")*,'"'

;--Other--

<sign>::= +|-
<keyword>::= <type>|<boolean_literal>|function|program|for|while|if|then|else|continue|break|const|def|div